//@version=6
indicator("Narrative Signal Index", overlay=false, max_lines_count=100, max_labels_count=100)

// ==============================
// SETTINGS
// ==============================
 
lenFast        = input.int(50,      "Fast Period",              minval=10,  group="Distribution")
lenSlow        = input.int(200,     "Slow Period",              minval=50,  group="Distribution")
binThreshold   = input.float(1.5,   "Bin Threshold (xRetEMA)",  minval=0.5, step=0.1, group="Distribution")

 
noveltyMin     = input.float(0.5,   "Min Novelty (JSD z-score)", minval=0.0, step=0.1, group="Signal Strength")
signalZScore   = input.float(2.2,   "Signal Threshold (z-score)", minval=0.5, step=0.1, group="Signal Strength")
smoothPeriod   = input.int(5,       "Signal Smoothing",         minval=1,   group="Signal Strength")
storyThreshold = input.float(10.0,  "Story Threshold (Â±)",        minval=1.0, step=1.0, group="Signal Strength")
nearZ          = input.float(0.8,   "Near-threshold z",          minval=0.1, step=0.1, group="Signal Strength")

 
wCLV           = input.float(0.4,   "Close Location Weight",    minval=0.0, maxval=1.0, group="Direction")
wWick          = input.float(0.2,   "Wick Asymmetry Weight",    minval=0.0, maxval=1.0, group="Direction")
wGap           = input.float(0.0,   "Gap Weight",               minval=0.0, maxval=1.0, group="Direction")

 
useVolShock    = input.bool(true,   "Enable Vol-of-Vol",        group="Volatility")
volWeight      = input.float(0.35,  "Vol Shock Weight",         minval=0.0, maxval=1.0, group="Volatility")

 
useTrend       = input.bool(true,   "Trend Filter (EMA)",       group="Filters")
trendPeriod    = input.int(200,     "Trend EMA Period",         minval=50,  group="Filters")
cooldownBars   = input.int(10,     "Signal Cooldown (bars)",   minval=0,   group="Filters")

 
useCrashVeto   = input.bool(true,  "Veto after crash",         group="Filters")
crashLookback  = input.int(8,      "Crash lookback",           minval=1,   group="Filters")
crashSigma     = input.float(2.0,  "Crash sigma (xRetEMA)",    minval=1.0, step=0.1, group="Filters")
useEmaSlope    = input.bool(true,  "EMA slope filter",         group="Filters")
useMomentum    = input.bool(true,  "Positive momentum filter",  group="Filters")

 
showPanel      = input.bool(true,   "Show Info Panel",          group="Display")
paintBars      = input.bool(true,   "Paint Signal Bars",        group="Display")
showHistogram  = input.bool(true,   "Show NSI Histogram",       group="Display")
showThresholds = input.bool(true,   "Show Threshold Lines",     group="Display")
showSignals    = input.bool(true,   "Show Signal Markers",      group="Display")
panelThrottleN = input.int(1,       "Panel throttle N (bars)",  minval=1,   group="Display")
showNearMarks  = input.bool(true,   "Show Near-Threshold Marks", group="Display")
confirmNear    = input.bool(true,   "Near-threshold only on close", group="Display")
minBars        = input.int(200,     "Min Bars for Signals",    minval=50, group="Display")

// ==============================
// HELPERS
// ==============================
eps = 1e-9
ln2 = 0.69314718056
safeLog(x) =>
    math.log(math.max(eps, x))

safeTanh(x) =>
    x >= 0 ? ((1.0 - math.exp(-2.0 * x)) / (1.0 + math.exp(-2.0 * x))) :
             ((math.exp(2.0 * x) - 1.0) / (math.exp(2.0 * x) + 1.0))

klDivergence(p1, p2, p3, q1, q2, q3) =>
    float result = 0.0
    result := result + p1 * (safeLog(math.max(eps, p1)) - safeLog(math.max(eps, q1)))
    result := result + p2 * (safeLog(math.max(eps, p2)) - safeLog(math.max(eps, q2)))
    result := result + p3 * (safeLog(math.max(eps, p3)) - safeLog(math.max(eps, q3)))
    result

// ==============================
// RETURN DISTRIBUTION (3-Bin)
// ==============================
ret = math.log(close / close[1])
retValid = nz(ret, 0.0)
volEMA = ta.ema(math.abs(retValid), lenSlow)
thrUp = binThreshold * volEMA
thrDn = -binThreshold * volEMA

hasThr = not na(thrUp) and not na(thrDn)
binUp   = hasThr and retValid >  thrUp ? 1.0 : 0.0
binDn   = hasThr and retValid <  thrDn ? 1.0 : 0.0
binFlat = hasThr and retValid >= thrDn and retValid <= thrUp ? 1.0 : 0.0

alphaFast = 2.0 / (lenFast + 1.0)
var float fastUp = 1.0/3.0
var float fastFlat = 1.0/3.0
var float fastDn = 1.0/3.0

fastUp   := (1.0 - alphaFast) * nz(fastUp[1],   1.0/3.0) + alphaFast * binUp
fastFlat := (1.0 - alphaFast) * nz(fastFlat[1], 1.0/3.0) + alphaFast * binFlat
fastDn   := (1.0 - alphaFast) * nz(fastDn[1],   1.0/3.0) + alphaFast * binDn

sumFast = fastUp + fastFlat + fastDn
fastUp   := sumFast > 0 ? fastUp / sumFast : 1.0/3.0
fastFlat := sumFast > 0 ? fastFlat / sumFast : 1.0/3.0
fastDn   := sumFast > 0 ? fastDn / sumFast : 1.0/3.0

alphaSlow = 2.0 / (lenSlow + 1.0)
var float slowUp = 1.0/3.0
var float slowFlat = 1.0/3.0
var float slowDn = 1.0/3.0

slowUp   := (1.0 - alphaSlow) * nz(slowUp[1],   1.0/3.0) + alphaSlow * binUp
slowFlat := (1.0 - alphaSlow) * nz(slowFlat[1], 1.0/3.0) + alphaSlow * binFlat
slowDn   := (1.0 - alphaSlow) * nz(slowDn[1],   1.0/3.0) + alphaSlow * binDn

sumSlow = slowUp + slowFlat + slowDn
slowUp   := sumSlow > 0 ? slowUp / sumSlow : 1.0/3.0
slowFlat := sumSlow > 0 ? slowFlat / sumSlow : 1.0/3.0
slowDn   := sumSlow > 0 ? slowDn / sumSlow : 1.0/3.0

// ==============================
// NOVELTY (JSD)
// ==============================
mixUp   = 0.5 * (fastUp + slowUp)
mixFlat = 0.5 * (fastFlat + slowFlat)
mixDn   = 0.5 * (fastDn + slowDn)

klFast = klDivergence(fastUp, fastFlat, fastDn, mixUp, mixFlat, mixDn)
klSlow = klDivergence(slowUp, slowFlat, slowDn, mixUp, mixFlat, mixDn)

jsd = 0.5 * (klFast + klSlow)
jsdNorm = jsd / ln2

jsdMean = ta.sma(jsdNorm, 200)
jsdStd  = ta.stdev(jsdNorm, 200)
jsdZ    = jsdStd > 0 ? (jsdNorm - jsdMean) / jsdStd : 0.0

isNovel = jsdZ > noveltyMin

// ==============================
// IMPROVED DIRECTION CALCULATION
// ==============================
rng = high - low
clv = rng > 0 ? ((close - low) - (high - close)) / rng : 0.0

upperWick = high - math.max(open, close)
lowerWick = math.min(open, close) - low
wickAsym = rng > 0 ? (upperWick - lowerWick) / rng : 0.0

gapRaw = open - close[1]
atr14 = ta.atr(14)
gapNorm = atr14 > 0 ? math.max(-3.0, math.min(3.0, gapRaw / atr14)) : 0.0

// Normalized direction calculation
wTotal = wCLV + wWick + wGap
dirCalc = wTotal > 0 ? (wCLV * clv - wWick * wickAsym + wGap * gapNorm) / wTotal : 0.0
direction = math.max(-1.0, math.min(1.0, dirCalc))

// ==============================
// ENHANCED VOL OF VOL
// ==============================
tr = ta.tr(true)
trEMA = ta.ema(tr, lenFast)
volShockRaw = trEMA > 0 ? (tr / trEMA - 1.0) : 0.0
volShock = math.max(-3.0, math.min(3.0, volShockRaw))
volTerm = useVolShock ? (volWeight * volShock) : 0.0

// ==============================
// IMPROVED NSI CALCULATION
// ==============================
rawNSI = 0.65 * (jsdNorm * direction) + volTerm
nsi = 100.0 * safeTanh(2.0 * rawNSI)
nsiSmooth = ta.ema(nsi, smoothPeriod)
// Precompute change to avoid conditional execution issues
nsiChange = ta.change(nsiSmooth)

nsiMean = ta.sma(nsiSmooth, 200)
nsiStd  = ta.stdev(nsiSmooth, 200)
zScore  = nsiStd > 0 ? (nsiSmooth - nsiMean) / nsiStd : 0.0

thrPositive = nsiMean + signalZScore * nsiStd
thrNegative = nsiMean - signalZScore * nsiStd

// ==============================
// CENTRALIZED CONDITIONS
// ==============================
// Centralized boolean conditions for performance and consistency
validThr = not na(thrPositive) and not na(thrNegative) and bar_index >= minBars
hypeCond = validThr and nsiSmooth > thrPositive
fearCond = validThr and nsiSmooth < thrNegative

// Pre-signal proximity (near threshold) via z-score
nearHype = validThr and not (hypeCond or fearCond) and zScore > nearZ and (confirmNear ? barstate.isconfirmed : true)
nearFear = validThr and not (hypeCond or fearCond) and zScore < -nearZ and (confirmNear ? barstate.isconfirmed : true)

// ==============================
// SIGNAL GENERATION
// ==============================
emaTrend = ta.ema(close, trendPeriod)
emaChange = ta.change(emaTrend)

retEmaAbs = volEMA
useCumCrashVeto = input.bool(false, "Use cumulative crash veto", group="Filters")
cumRetAll = ta.cum(retValid)
cumRet = cumRetAll - nz(cumRetAll[crashLookback], 0)
recentCrash = (bar_index >= crashLookback) and (useCumCrashVeto ? (cumRet < -crashSigma * retEmaAbs * crashLookback) : (ta.lowest(retValid, crashLookback) < -crashSigma * retEmaAbs))

emaSlopePos = emaChange > 0

trendBullish = not useTrend or (close > emaTrend and (not useEmaSlope or emaSlopePos))
trendBearish = not useTrend or (close < emaTrend and (not useEmaSlope or not emaSlopePos))

var int cooldownBull = 0
var int cooldownBear = 0

canBull = cooldownBull <= 0
canBear = cooldownBear <= 0

// Base signal conditions
baseHype = barstate.isconfirmed and isNovel and trendBullish and canBull and hypeCond and nsiStd > 0
baseFear = barstate.isconfirmed and isNovel and trendBearish and canBear and fearCond and nsiStd > 0

// Apply additional filters
crashVetoHype = not (useCrashVeto and recentCrash)
momentumHype = not useMomentum or nsiChange > 0

signalHype = baseHype and crashVetoHype and momentumHype
momentumFear = not useMomentum or nsiChange < 0
signalFear = baseFear and momentumFear

// Update cooldown counters
if barstate.isconfirmed
    cooldownBull := cooldownBull > 0 ? cooldownBull - 1 : 0
    cooldownBear := cooldownBear > 0 ? cooldownBear - 1 : 0
    
    if signalHype
        cooldownBull := cooldownBars
    if signalFear
        cooldownBear := cooldownBars

 

// ==============================
// VISUALS
// ==============================
// Zero line
hline(0, "Zero", color=color.gray, linestyle=hline.style_solid)

alpha = math.max(0, 60 - int(math.min(60, 10*math.abs(zScore))))
histogramColor = hypeCond ? color.new(#26a69a, 0) : fearCond ? color.new(#ef5350, 0) : (nsiSmooth >= 0 ? color.new(#26a69a, alpha) : color.new(#ef5350, alpha))
plot(showHistogram and bar_index >= minBars ? nsiSmooth : na, "NSI", style=plot.style_columns, color=histogramColor)

// NSI Line
plot(bar_index >= minBars ? nsiSmooth : na, "NSI Line", color=color.white, linewidth=2)

// Threshold lines with NA protection
pUp = plot(showThresholds and validThr ? thrPositive : na, "Hype Threshold", color=color.new(#26a69a, 60), linewidth=2)
pDn = plot(showThresholds and validThr ? thrNegative : na, "Fear Threshold", color=color.new(#ef5350, 60), linewidth=2)
fill(pUp, pDn, color=color.new(color.gray, 95))

// Signal shapes with improved visibility and minBars protection
plotshape(signalHype and showSignals and bar_index >= minBars, title="HYPE", style=shape.triangleup, location=location.top, color=#26a69a, size=size.normal, text="HYPE", textcolor=color.white)
plotshape(signalFear and showSignals and bar_index >= minBars, title="FEAR", style=shape.triangledown, location=location.bottom, color=#ef5350, size=size.normal, text="FEAR", textcolor=color.white)
plotshape(showNearMarks and nearHype and bar_index >= minBars, title="NEAR HYPE", style=shape.circle, location=location.top, color=color.new(#26a69a, 0), size=size.tiny)
plotshape(showNearMarks and nearFear and bar_index >= minBars, title="NEAR FEAR", style=shape.circle, location=location.bottom, color=color.new(#ef5350, 0), size=size.tiny)

// Bar coloring
barcolor(paintBars and validThr and barstate.isconfirmed and signalHype ? color.new(#26a69a, 70) :
         paintBars and validThr and barstate.isconfirmed and signalFear ? color.new(#ef5350, 70) : na)

// Helper function for progress bars
mkbar(h) =>
    int seg = 8
    int filled = int(math.floor(h / 100.0 * seg + 0.0001))
    string bar = ""
    for i = 0 to seg - 1
        if i < filled
            bar += "â"
        else
            bar += "â"
    bar

// ==============================
// INFO PANEL
// ==============================
var table panel = na

// Panel cleanup when disabled
if not showPanel and not na(panel) and barstate.islast
    table.clear(panel, 0, 0, 3, 11)

canUpdatePanel = barstate.islast and (bar_index % panelThrottleN == 0)
if showPanel and canUpdatePanel
    if na(panel)
        panel := table.new(position.top_right, 4, 12, bgcolor=color.new(#0a0a0a, 85), border_width=3, border_color=color.new(#2a2a2a, 70))
    
    // Clear previous content
    table.clear(panel, 0, 0, 3, 11)
    
    // Enhanced color scheme
    color bgDark = color.new(#0a0a0a, 85)
    color bgCard = color.new(#1a1a1a, 80)
    color bgSuccess = color.new(#0d4f3c, 70)
    color bgWarning = color.new(#4a3c0d, 70)
    color bgError = color.new(#4a0d0d, 70)
    color textPrimary = color.new(#ffffff, 0)
    color textSecondary = color.new(#b0b0b0, 0)
    color textAccent = color.new(#4ade80, 0)
    
    // Main Header with centralized conditions
    string headerText = str.format("NSI: {0}", str.format("{0,number,0.##}", nsiSmooth))
    color headerBg = hypeCond ? color.new(#26a69a, 60) : fearCond ? color.new(#ef5350, 60) : (nsiSmooth >= 0 ? color.new(#26a69a, 80) : color.new(#ef5350, 80))
    table.cell(panel, 0, 0, headerText, text_color=textPrimary, text_halign=text.align_center, bgcolor=headerBg, text_size=size.large)
    table.merge_cells(panel, 0, 0, 3, 0)
    
    // Status Cards Row
    // Calculate strength percentage with NA protection
    thrBand = validThr ? (nsiSmooth >= 0 ? math.max(1e-6, thrPositive - nsiMean) : math.max(1e-6, nsiMean - thrNegative)) : 1e-6
    strengthPct = thrBand > 0 ? math.abs(nsiSmooth - nsiMean) / thrBand : 0.0
    
    string noveltyCard = jsdZ > 2.5 ? "SHOCK" : jsdZ > 1.0 ? "ACTIVE" : "CALM"
    color noveltyCardBg = jsdZ > 2.5 ? bgError : jsdZ > 1.0 ? bgWarning : bgCard
    table.cell(panel, 0, 1, noveltyCard, text_color=textPrimary, text_halign=text.align_center, bgcolor=noveltyCardBg, text_size=size.normal)
    
    string storyCard = nsiSmooth > storyThreshold ? "HYPE" : nsiSmooth < -storyThreshold ? "FEAR" : "NEUTRAL"
    color storyCardBg = nsiSmooth > storyThreshold ? bgSuccess : nsiSmooth < -storyThreshold ? bgError : bgCard
    table.cell(panel, 1, 1, storyCard, text_color=textPrimary, text_halign=text.align_center, bgcolor=storyCardBg, text_size=size.normal)
    
    string strengthCard = strengthPct > 1.2 ? "VERY STRONG" : strengthPct > 0.7 ? "STRONG" : strengthPct > 0.3 ? "MEDIUM" : "WEAK"
    color strengthCardBg = strengthPct > 1.2 ? bgSuccess : strengthPct > 0.7 ? bgWarning : bgCard
    table.cell(panel, 2, 1, strengthCard, text_color=textPrimary, text_halign=text.align_center, bgcolor=strengthCardBg, text_size=size.normal)
    
    string signalCard = signalHype ? "HYPE" : signalFear ? "FEAR" : "WAIT"
    color signalCardBg = signalHype ? bgSuccess : signalFear ? bgError : bgCard
    table.cell(panel, 3, 1, signalCard, text_color=textPrimary, text_halign=text.align_center, bgcolor=signalCardBg, text_size=size.normal)
    
    // Detailed Info Section
    string noveltyInfo = "Novelty: " + noveltyCard + " (" + str.format("{0,number,0.##}", jsdZ) + ")"
    table.cell(panel, 0, 2, noveltyInfo, text_color=textSecondary, text_halign=text.align_left, bgcolor=bgDark, text_size=size.normal)
    table.merge_cells(panel, 0, 2, 2, 2)
    
    string storyInfo = "Story: " + storyCard + " (" + str.format("{0,number,0.##}", nsiSmooth) + ")  z: " + str.format("{0,number,0.##}", zScore)
    table.cell(panel, 3, 2, storyInfo, text_color=textSecondary, text_halign=text.align_left, bgcolor=bgDark, text_size=size.normal)
    table.merge_cells(panel, 3, 2, 3, 2)
    

    
    // Signal Analysis Items
    string noveltyAnalysis = (jsdZ > noveltyMin ? "â" : "â") + " Novelty: " + noveltyCard
    color noveltyAnalysisBg = jsdZ > noveltyMin ? bgSuccess : bgError
    table.cell(panel, 0, 4, noveltyAnalysis, text_color=textPrimary, text_halign=text.align_left, bgcolor=noveltyAnalysisBg, text_size=size.normal)
    table.merge_cells(panel, 0, 4, 3, 4)
    
    string storyAnalysis = (math.abs(nsiSmooth) > storyThreshold ? "â" : "â") + " Story: " + storyCard
    color storyAnalysisBg = math.abs(nsiSmooth) > storyThreshold ? bgSuccess : bgError
    table.cell(panel, 0, 5, storyAnalysis, text_color=textPrimary, text_halign=text.align_left, bgcolor=storyAnalysisBg, text_size=size.normal)
    table.merge_cells(panel, 0, 5, 3, 5)
    
    string strengthAnalysis = (strengthPct > 0.3 ? "â" : "â") + " Strength: " + strengthCard
    color strengthAnalysisBg = strengthPct > 0.3 ? bgSuccess : bgError
    table.cell(panel, 0, 6, strengthAnalysis, text_color=textPrimary, text_halign=text.align_left, bgcolor=strengthAnalysisBg, text_size=size.normal)
    table.merge_cells(panel, 0, 6, 3, 6)
    
    string signalAnalysis = ((signalHype or signalFear) ? "â" : "â") + " Signal: " + signalCard
    color signalAnalysisBg = signalHype or signalFear ? bgSuccess : bgError
    table.cell(panel, 0, 7, signalAnalysis, text_color=textPrimary, text_halign=text.align_left, bgcolor=signalAnalysisBg, text_size=size.normal)
    table.merge_cells(panel, 0, 7, 3, 7)
    
   
    
    // Progress Bars
    string noveltyBar = "Novelty: " + mkbar(math.min(100, math.max(0, (jsdZ + 3) / 6 * 100)))
    table.cell(panel, 0, 9, noveltyBar, text_color=textPrimary, text_halign=text.align_left, bgcolor=bgCard, text_size=size.normal)
    table.merge_cells(panel, 0, 9, 1, 9)
    
    string storyBar = "Story: " + mkbar(math.min(100, math.max(0, (nsiSmooth + 100) / 200 * 100)))
    table.cell(panel, 2, 9, storyBar, text_color=textPrimary, text_halign=text.align_left, bgcolor=bgCard, text_size=size.normal)
    table.merge_cells(panel, 2, 9, 3, 9)
    
    string strengthBar = "Strength: " + mkbar(math.min(100, strengthPct * 100))
    table.cell(panel, 0, 10, strengthBar, text_color=textPrimary, text_halign=text.align_left, bgcolor=bgCard, text_size=size.normal)
    table.merge_cells(panel, 0, 10, 1, 10)
    
    string signalBar = "Signal: " + mkbar(signalHype or signalFear ? 100 : 0)
    table.cell(panel, 2, 10, signalBar, text_color=textPrimary, text_halign=text.align_left, bgcolor=bgCard, text_size=size.normal)
    table.merge_cells(panel, 2, 10, 3, 10)
    
    // Overall Status with NA protection
    string overallStatus = signalHype ? "HYPE SIGNAL ACTIVE" : signalFear ? "FEAR SIGNAL ACTIVE" : "WAITING FOR SIGNAL"
    color overallBg = signalHype ? color.new(#26a69a, 60) : signalFear ? color.new(#ef5350, 60) : color.new(#4a3c0d, 60)
    table.cell(panel, 0, 11, overallStatus, text_color=textPrimary, text_halign=text.align_center, bgcolor=overallBg, text_size=size.large)
    table.merge_cells(panel, 0, 11, 3, 11)

// ==============================
// ALERTS
// ==============================
alertcondition(signalHype, "HYPE Signal", "NSI HYPE Signal: Bullish momentum detected with strong narrative")
alertcondition(signalFear, "FEAR Signal", "NSI FEAR Signal: Bearish momentum detected with strong narrative")
alertcondition(signalHype or signalFear, "NSI Any Signal", "NSI: HYPE or FEAR")
alertcondition(nearHype or nearFear, "NSI Near-Threshold", "NSI near threshold (pre-signal)")

 